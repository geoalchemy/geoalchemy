GeoAlchemy Change Log
=====================

0.7.2
-----

* make BaseFunction work within SQLAlchemy "has" calls. (#17, #18, @tonio)
* PostGIS: use the "ST_" versions of the GeomFromWKB, GeomFromText, and
  isValid functions. This changes breaks compatibility with PostGIS < 1.4
  but is a step towards PostGIS 2.0. (#19, #20, @Phacops)
* Fix incompatibility with SQLAlchemy 0.8.0b2. (#27)

0.7.1
-----

* add MANIFEST.in file to include README.rst in source packages. fixes build errors.

0.7
---

* subclass UserDefinedType instead of TypeEngine for GeometryBase (@elemoine)
* No longer use "GIST_GEOMETRY_OPS" for PostGIS spatial index creation (#6, @kwirk)
* Better handling of == and != operators for geometries, PostGIS-only (#7, @kwirk)
* New wkt_internal option to Geometry constructor, PostGIS-only (#9, @kwirk)

0.6
---

* support for SQLAlchemy 0.7
* fix errors in the Spatialite implementation of within_distance, 

0.5
---

* add within_distance support for MySQL and Spatialite
  https://bitbucket.org/geoalchemy/geoalchemy/issue/3/add-within_distance-support
* fix typo in util.py, patch from Roy Hyunjin Han
* fix typos in the documentation, patch from vrutsky
  https://bitbucket.org/geoalchemy/geoalchemy/issue/2/typos-in-documentation
* support for table aliases when using RAW ('table_alias.geom_column.RAW')

0.4.1
-----

* DBSpatialElement now working properly for MS SQL Server 2008

0.4
-----

* GeoAlchemy supports MS SQL Server 2008

0.3.1
-----

* Fix for py2.5 syntax errors

0.3
-----

* GeoAlchemy supports Oracle
* Introduced RAW attribute, so that the geometry column can
    be used in a select clause without being surrounded with
    'AsBinary(..)'
    >>> session.query(func.extent(Spot.spot_location.RAW)).first()

0.2
---

* Ported to SQLAlchemy 0.6
* When fetching objects of mapped classes, the geometry column
	is queried in WKB.
* The WKB value of a geometry column can be accessed directly,
	without making a new database query, using the attribute 
	geom_wkb (for example: s.the_geom.geom_wkb).
* Introduced DBSpatialElement that can be used to wrap the
	result of a database function, that returned a new geometry, so
	that new queries can be executed on the result.
	>>> buffer_geom = DBSpatialElement(session.scalar(r.geom.buffer(10.0)))
	>>> session.scalar(buffer_geom.wkt)
* Removed 'SFS' flag for GeometryColumn.
* When using database specific functions on geometry columns 
	(Spot.geom.kml, but not s.geom.kml!), a comparator has to be set
	manually when defining the mapping.
* Updated documentation and examples.
* Use spatial index for Spatialite.
* Set NOT NULL constraints in database (nullable=False).
* GeometryBase: changed default value of dimension to 2.

0.1.1
-----

* ST_Transform support for postgis
* Non public schema support
* Several documentation fixes
* Some new examples

0.1
---

* Some documentation
* Support for spatial indexing
* Support for geometry collections
* MySQL support and MBR comparators
* Spatialite geometry relations as column comparators
* Postgis geometry relations as column comparators
* Spatial comparator
* GeometryBase as base class
* Unittests for spatialite
* Geometry functions for spatialite
* EPSG:4326 as default SRID

0.1dev
---

* OGC geometry relations
* PostGIS functions and format converters
* Posgis spatial functions based on OGC SQL/MM
* minor changes
* Improved spatialite support
* Unit tests for postgis
* Spatialite support
* PostGIS geometry support based on SQLAlchemy postgis example

